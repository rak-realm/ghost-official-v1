// GHOST-OFFICIAL-V1 Language System
// RAK Realm - Copyright RAK

const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');
const config = require('./config');

class LanguageSystem {
    constructor() {
        this.languages = {};
        this.defaultLanguage = 'EN';
        this.currentLanguage = config.LANGUAGE || this.defaultLanguage;
        this.languageDir = path.join(__dirname, 'languages');
        
        this.initialize();
    }

    async initialize() {
        try {
            // Create languages directory if it doesn't exist
            await fs.ensureDir(this.languageDir);
            
            // Check if directory is empty, create default languages
            const files = await fs.readdir(this.languageDir);
            if (files.length === 0) {
                await this.createDefaultLanguages();
            }

            // Load all available languages
            await this.loadAllLanguages();
            
            // Validate current language
            if (!this.languages[this.currentLanguage]) {
                console.log(chalk.yellow.bold(
                    `Language '${this.currentLanguage}' not found. Using default '${this.defaultLanguage}'.`
                ));
                this.currentLanguage = this.defaultLanguage;
            }

            console.log(chalk.green.bold(
                `тЬУ Loaded ${Object.keys(this.languages).length} languages. Using: ${this.currentLanguage}`
            ));

        } catch (error) {
            console.log(chalk.red.bold('тЬЧ Language system initialization failed:'), error.message);
            this.createEmergencyLanguage();
        }
    }

    async loadAllLanguages() {
        try {
            const files = await fs.readdir(this.languageDir);
            
            for (const file of files) {
                if (path.extname(file) === '.json') {
                    try {
                        const langCode = path.basename(file, '.json');
                        const filePath = path.join(this.languageDir, file);
                        const data = await fs.readFile(filePath, 'utf8');
                        this.languages[langCode] = JSON.parse(data);
                        
                        console.log(chalk.blue.bold(`тЬУ Loaded language: ${langCode}`));
                    } catch (error) {
                        console.log(chalk.red.bold(`тЬЧ Error loading language file ${file}:`), error.message);
                    }
                }
            }
        } catch (error) {
            console.log(chalk.red.bold('тЬЧ Error reading language directory:'), error.message);
        }
    }

    getString(key, variables = {}, language = null) {
        const lang = language || this.currentLanguage;
        const langData = this.languages[lang] || this.languages[this.defaultLanguage];
        
        if (!langData) {
            return `{LANGUAGE_ERROR:${key}}`;
        }

        // Support nested keys with dot notation: "GROUP.WELCOME"
        const keys = key.split('.');
        let value = langData;
        
        for (const k of keys) {
            if (value && typeof value === 'object' && k in value) {
                value = value[k];
            } else {
                // Fallback to default language
                if (lang !== this.defaultLanguage) {
                    return this.getString(key, variables, this.defaultLanguage);
                }
                return `{MISSING:${key}}`;
            }
        }

        // If value is still an object, return the key
        if (typeof value === 'object') {
            return `{INVALID_KEY:${key}}`;
        }

        // Replace variables in the string
        if (typeof value === 'string' && variables) {
            for (const [varKey, varValue] of Object.entries(variables)) {
                value = value.replace(new RegExp(`{{${varKey}}}`, 'g'), varValue);
            }
        }

        return value;
    }

    async createDefaultLanguages() {
        const defaultLanguages = {
            'EN': this.getEnglishStrings(),
            'UR': this.getUrduStrings(),
            'HI': this.getHindiStrings(),
            'AR': this.getArabicStrings()
        };

        for (const [langCode, strings] of Object.entries(defaultLanguages)) {
            try {
                const filePath = path.join(this.languageDir, `${langCode}.json`);
                await fs.writeFile(filePath, JSON.stringify(strings, null, 2), 'utf8');
                console.log(chalk.green.bold(`тЬУ Created default language: ${langCode}`));
            } catch (error) {
                console.log(chalk.red.bold(`тЬЧ Error creating language ${langCode}:`), error.message);
            }
        }
    }

    getEnglishStrings() {
        return {
            META: {
                LANGUAGE: "English",
                CODE: "EN",
                DIRECTION: "ltr"
            },
            SUCCESS: {
                BOT_START: "тЬУ *GHOST-OFFICIAL-V1* started successfully!",
                COMMAND_EXECUTED: "Command executed successfully!",
                SETTING_UPDATED: "Setting updated successfully!"
            },
            ERRORS: {
                COMMAND_NOT_FOUND: "тЬЧ Command not found. Use /help to see available commands.",
                NO_PERMISSION: "тЬЧ You don't have permission to use this command.",
                INVALID_SYNTAX: "тЬЧ Invalid command syntax.",
                ONLY_GROUP: "тЬЧ This command can only be used in groups.",
                ONLY_PRIVATE: "тЬЧ This command can only be used in private chat."
            },
            GROUP: {
                WELCOME: "тЬУ Welcome {{user}} to {{group}}!",
                GOODBYE: "тЬЧ Goodbye {{user}}! We'll miss you.",
                PROMOTED: "тЬУ {{user}} has been promoted to admin!",
                DEMOTED: "тЬЧ {{user}} has been demoted from admin."
            },
            COMMON: {
                HELP: "ЁЯУЦ *Available Commands:*\n{{commands}}",
                PING: "ЁЯПУ Pong! {{responseTime}}ms",
                ABOUT: `тД╣я╕П *GHOST-OFFICIAL-V1* тД╣я╕П\nVersion: {{version}}\nOwner: {{owner}}\nRealm: {{realm}}`,
                STATUS: "тЬУ Bot is online and operational!"
            }
        };
    }

    getUrduStrings() {
        return {
            META: {
                LANGUAGE: "Urdu",
                CODE: "UR",
                DIRECTION: "rtl"
            },
            SUCCESS: {
                BOT_START: "тЬУ *GHOST-OFFICIAL-V1* ┌й╪з┘Е█М╪з╪и█М ╪│█Т ╪┤╪▒┘И╪╣ █Б┘И ┌п█М╪з █Б█Т!",
                COMMAND_EXECUTED: "┌й┘Е╪з┘Ж┌И ┌й╪з┘Е█М╪з╪и█М ╪│█Т ╪╣┘Е┘Д ┘Е█М┌║ ╪в╪ж█М!",
                SETTING_UPDATED: "╪к╪▒╪к█М╪и ┌й╪з┘Е█М╪з╪и█М ╪│█Т ╪з┘╛ ┌И█М┘╣ █Б┘И ┌п╪ж█М!"
            },
            ERRORS: {
                COMMAND_NOT_FOUND: "тЬЧ ┌й┘Е╪з┘Ж┌И ┘Ж█Б█М┌║ ┘Е┘Д█М█Ф ╪п╪│╪к█М╪з╪и ┌й┘Е╪з┘Ж┌И╪▓ ╪п█М┌й┌╛┘Ж█Т ┌й█Т ┘Д█М█Т /help ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒█М┌║█Ф",
                NO_PERMISSION: "тЬЧ ╪в┘╛ ┌й┘И ╪з╪│ ┌й┘Е╪з┘Ж┌И ┌й┘И ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒┘Ж█Т ┌й█М ╪з╪м╪з╪▓╪к ┘Ж█Б█М┌║ █Б█Т█Ф",
                INVALID_SYNTAX: "тЬЧ ╪║┘Д╪╖ ┌й┘Е╪з┘Ж┌И ┘Ж╪н┘И█Ф",
                ONLY_GROUP: "тЬЧ █М█Б ┌й┘Е╪з┘Ж┌И ╪╡╪▒┘Б ┌п╪▒┘И┘╛╪│ ┘Е█М┌║ ╪з╪│╪к╪╣┘Е╪з┘Д ┌й█М ╪м╪з ╪│┌й╪к█М █Б█Т█Ф",
                ONLY_PRIVATE: "тЬЧ █М█Б ┌й┘Е╪з┘Ж┌И ╪╡╪▒┘Б ┘╛╪▒╪з╪ж█М┘И█М┘╣ ┌Ж█М┘╣ ┘Е█М┌║ ╪з╪│╪к╪╣┘Е╪з┘Д ┌й█М ╪м╪з ╪│┌й╪к█М █Б█Т█Ф"
            },
            GROUP: {
                WELCOME: "тЬУ {{group}} ┘Е█М┌║ ╪о┘И╪┤ ╪в┘Е╪п█М╪п {{user}}!",
                GOODBYE: "тЬЧ ╪з┘Д┘И╪п╪з╪╣ {{user}}! █Б┘Е ╪в┘╛ ┌й┘И █М╪з╪п ┌й╪▒█М┌║ ┌п█Т█Ф",
                PROMOTED: "тЬУ {{user}} ┌й┘И ╪з█М┌И┘Е┘Ж ╪и┘Ж╪з█М╪з ┌п█М╪з █Б█Т!",
                DEMOTED: "тЬЧ {{user}} ┌й┘И ╪з█М┌И┘Е┘Ж ┌й█Т ╪╣█Б╪п█Т ╪│█Т █Б┘╣╪з ╪п█М╪з ┌п█М╪з █Б█Т█Ф"
            },
            COMMON: {
                HELP: "ЁЯУЦ *╪п╪│╪к█М╪з╪и ┌й┘Е╪з┘Ж┌И╪▓:*\n{{commands}}",
                PING: "ЁЯПУ ┘╛┘И┘Ж┌п! {{responseTime}}ms",
                ABOUT: `тД╣я╕П *GHOST-OFFICIAL-V1* тД╣я╕П\n┘И╪▒┌Ш┘Ж: {{version}}\n┘Е╪з┘Д┌й: {{owner}}\n╪▒█М┘Д┘Е: {{realm}}`,
                STATUS: "тЬУ ╪и┘И┘╣ ╪в┘Ж ┘Д╪з╪ж┘Ж ╪з┘И╪▒ ┌й╪з┘Е ┌й╪▒ ╪▒█Б╪з █Б█Т!"
            }
        };
    }

    getHindiStrings() {
        return {
            META: {
                LANGUAGE: "Hindi",
                CODE: "HI",
                DIRECTION: "ltr"
            },
            SUCCESS: {
                BOT_START: "тЬУ *GHOST-OFFICIAL-V1* рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╢реБрд░реВ рд╣реЛ рдЧрдпрд╛ рд╣реИ!",
                COMMAND_EXECUTED: "рдХрдорд╛рдВрдб рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдирд┐рд╖реНрдкрд╛рджрд┐рдд рд╣реБрдИ!",
                SETTING_UPDATED: "рд╕реЗрдЯрд┐рдВрдЧ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдкрдбреЗрдЯ рд╣реЛ рдЧрдИ!"
            },
            ERRORS: {
                COMMAND_NOT_FOUND: "тЬЧ рдХрдорд╛рдВрдб рдирд╣реАрдВ рдорд┐рд▓реАред рдЙрдкрд▓рдмреНрдз рдХрдорд╛рдВрдб рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП /help рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
                NO_PERMISSION: "тЬЧ рдЖрдкрдХреЗ рдкрд╛рд╕ рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред",
                INVALID_SYNTAX: "тЬЧ рдЕрдорд╛рдиреНрдп рдХрдорд╛рдВрдб рд╕рд┐рдВрдЯреИрдХреНрд╕ред",
                ONLY_GROUP: "тЬЧ рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рд╕рдореВрд╣реЛрдВ рдореЗрдВ рдЙрдкрдпреЛрдЧ рдХреА рдЬрд╛ рд╕рдХрддреА рд╣реИред",
                ONLY_PRIVATE: "тЬЧ рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдирд┐рдЬреА рдЪреИрдЯ рдореЗрдВ рдЙрдкрдпреЛрдЧ рдХреА рдЬрд╛ рд╕рдХрддреА рд╣реИред"
            },
            GROUP: {
                WELCOME: "тЬУ {{group}} рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ {{user}}!",
                GOODBYE: "тЬЧ рдЕрд▓рд╡рд┐рджрд╛ {{user}}! рд╣рдо рдЖрдкрдХреЛ рдпрд╛рдж рдХрд░реЗрдВрдЧреЗред",
                PROMOTED: "тЬУ {{user}} рдХреЛ рдПрдбрдорд┐рди рдмрдирд╛рдпрд╛ рдЧрдпрд╛ рд╣реИ!",
                DEMOTED: "тЬЧ {{user}} рдХреЛ рдПрдбрдорд┐рди рдХреЗ рдкрдж рд╕реЗ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред"
            },
            COMMON: {
                HELP: "ЁЯУЦ *рдЙрдкрд▓рдмреНрдз рдХрдорд╛рдВрдб:*\n{{commands}}",
                PING: "ЁЯПУ рдкреЛрдВрдЧ! {{responseTime}}ms",
                ABOUT: `тД╣я╕П *GHOST-OFFICIAL-V1* тД╣я╕П\nрд╕рдВрд╕реНрдХрд░рдг: {{version}}\nрдорд╛рд▓рд┐рдХ: {{owner}}\nрд░реАрдо: {{realm}}`,
                STATUS: "тЬУ рдмреЙрдЯ рдСрдирд▓рд╛рдЗрди рдФрд░ рдХрд╛рд░реНрдпрд╢реАрд▓ рд╣реИ!"
            }
        };
    }

    getArabicStrings() {
        return {
            META: {
                LANGUAGE: "Arabic",
                CODE: "AR",
                DIRECTION: "rtl"
            },
            SUCCESS: {
                BOT_START: "тЬУ *GHOST-OFFICIAL-V1* ╪и╪п╪г ╪и┘Ж╪м╪з╪н!",
                COMMAND_EXECUTED: "╪к┘Е ╪к┘Ж┘Б┘К╪░ ╪з┘Д╪г┘Е╪▒ ╪и┘Ж╪м╪з╪н!",
                SETTING_UPDATED: "╪к┘Е ╪к╪н╪п┘К╪л ╪з┘Д╪е╪╣╪п╪з╪п ╪и┘Ж╪м╪з╪н!"
            },
            ERRORS: {
                COMMAND_NOT_FOUND: "тЬЧ ╪з┘Д╪г┘Е╪▒ ╪║┘К╪▒ ┘Е┘И╪м┘И╪п. ╪з╪│╪к╪о╪п┘Е /help ┘Д╪▒╪д┘К╪й ╪з┘Д╪г┘И╪з┘Е╪▒ ╪з┘Д┘Е╪к╪з╪н╪й.",
                NO_PERMISSION: "тЬЧ ┘Д┘К╪│ ┘Д╪п┘К┘Г ╪е╪░┘Ж ┘Д╪з╪│╪к╪о╪п╪з┘Е ┘З╪░╪з ╪з┘Д╪г┘Е╪▒.",
                INVALID_SYNTAX: "тЬЧ ╪и┘Ж╪з╪б ╪м┘Е┘Д╪й ╪г┘Е╪▒ ╪║┘К╪▒ ╪╡╪з┘Д╪н.",
                ONLY_GROUP: "тЬЧ ┘К┘Е┘Г┘Ж ╪з╪│╪к╪о╪п╪з┘Е ┘З╪░╪з ╪з┘Д╪г┘Е╪▒ ┘Б┘В╪╖ ┘Б┘К ╪з┘Д┘Е╪м┘Е┘И╪╣╪з╪к.",
                ONLY_PRIVATE: "тЬЧ ┘К┘Е┘Г┘Ж ╪з╪│╪к╪о╪п╪з┘Е ┘З╪░╪з ╪з┘Д╪г┘Е╪▒ ┘Б┘В╪╖ ┘Б┘К ╪з┘Д╪п╪▒╪п╪┤╪й ╪з┘Д╪о╪з╪╡╪й."
            },
            GROUP: {
                WELCOME: "тЬУ ┘Е╪▒╪н╪и┘Л╪з ╪и┘Г {{user}} ┘Б┘К {{group}}!",
                GOODBYE: "тЬЧ ┘И╪п╪з╪╣┘Л╪з {{user}}! ╪│┘Ж╪┤╪к╪з┘В ╪е┘Д┘К┘Г.",
                PROMOTED: "тЬУ ╪к┘Е╪к ╪к╪▒┘В┘К╪й {{user}} ╪е┘Д┘Й ┘Е╪│╪д┘И┘Д!",
                DEMOTED: "тЬЧ ╪к┘Е╪к ╪е╪▓╪з┘Д╪й {{user}} ┘Е┘Ж ┘Е┘Ж╪╡╪и ╪з┘Д┘Е╪│╪д┘И┘Д."
            },
            COMMON: {
                HELP: "ЁЯУЦ *╪з┘Д╪г┘И╪з┘Е╪▒ ╪з┘Д┘Е╪к╪з╪н╪й:*\n{{commands}}",
                PING: "ЁЯПУ ╪и┘И┘Ж╪м! {{responseTime}}ms",
                ABOUT: `тД╣я╕П *GHOST-OFFICIAL-V1* тД╣я╕П\n╪з┘Д╪е╪╡╪п╪з╪▒: {{version}}\n╪з┘Д┘Е╪з┘Д┘Г: {{owner}}\n╪з┘Д┘Е┘Е┘Д┘Г╪й: {{realm}}`,
                STATUS: "тЬУ ╪з┘Д╪и┘И╪к ┘К╪╣┘Е┘Д ┘И┘Е╪к╪╡┘Д!"
            }
        };
    }

    createEmergencyLanguage() {
        // Fallback in case of complete failure
        this.languages = {
            EN: this.getEnglishStrings()
        };
        this.currentLanguage = 'EN';
        console.log(chalk.yellow.bold('тЪая╕П  Using emergency fallback language (EN)'));
    }

    // Method to add new language at runtime
    async addLanguage(langCode, strings) {
        try {
            this.languages[langCode] = strings;
            const filePath = path.join(this.languageDir, `${langCode}.json`);
            await fs.writeFile(filePath, JSON.stringify(strings, null, 2), 'utf8');
            console.log(chalk.green.bold(`тЬУ Added new language: ${langCode}`));
            return true;
        } catch (error) {
            console.log(chalk.red.bold(`тЬЧ Error adding language ${langCode}:`), error.message);
            return false;
        }
    }

    // Method to switch language
    setLanguage(langCode) {
        if (this.languages[langCode]) {
            this.currentLanguage = langCode;
            console.log(chalk.green.bold(`тЬУ Language switched to: ${langCode}`));
            return true;
        }
        console.log(chalk.red.bold(`тЬЧ Language not available: ${langCode}`));
        return false;
    }

    // Get all available languages
    getAvailableLanguages() {
        return Object.keys(this.languages).map(code => ({
            code,
            name: this.languages[code]?.META?.LANGUAGE || code,
            direction: this.languages[code]?.META?.DIRECTION || 'ltr'
        }));
    }
}

// Create singleton instance
const languageSystem = new LanguageSystem();

// Helper function for easy access
function getString(key, variables = {}) {
    return languageSystem.getString(key, variables);
}

module.exports = {
    LanguageSystem,
    getString,
    instance: languageSystem
};
